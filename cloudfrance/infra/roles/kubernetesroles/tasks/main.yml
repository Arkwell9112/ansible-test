---

- name: Create kubernetes roles for node.
  vars:
    cert_types:
      - "kube_etcd"
      - "kube_etcd_peer"
      - "kube_etcd_healthcheck_client"
      - "kube_apiserver_etcd_client"
      - "kube_apiserver"
      - "kube_apiserver_kubelet_client"
      - "front_proxy_client"
      - "kubelet"
    certs_path:
      kube_etcd: "etcd"
      kube_etcd_peer: "etcd"
      kube_etcd_healthcheck_client: "etcd"
      kube_apiserver_etcd_client: "etcd"
      kube_apiserver: "kubernetes"
      kube_apiserver_kubelet_client: "kubernetes"
      front_proxy_client: "kubernetes_front_proxy"
      kubelet: "kubernetes"
    certs:
      kube_etcd:
        server: true
        client: true
        domains:
          - "kube-etcd"
          - "{{ cert_hostname }}"
          - "localhost"
        localhost: true
        ip_sans: true
        organization: ""
      kube_etcd_peer:
        server: true
        client: true
        domains:
          - "kube-etcd-peer"
          - "{{ cert_hostname }}"
          - "localhost"
        localhost: true
        ip_sans: true
        organization: ""
      kube_etcd_healthcheck_client:
        server: false
        client: true
        domains: [ "kube-etcd-healthcheck-client" ]
        localhost: false
        ip_sans: false
        organization: ""
      kube_apiserver_etcd_client:
        server: false
        client: true
        domains: [ "kube-apiserver-etcd-client" ]
        localhost: false
        ip_sans: false
        organization: ""
      kube_apiserver:
        server: true
        client: false
        domains:
          - "kube-apiserver"
          - "{{ cert_hostname }}"
          - "kubernetes"
          - "kubernetes.default"
          - "kubernetes.default.svc"
          - "kubernetes.default.svc.cluster"
          - "kubernetes.default.svc.cluster.local"
        localhost: false
        ip_sans: true
        organization: ""
      kube_apiserver_kubelet_client:
        server: false
        client: true
        domains: [ "kube-apiserver-kubelet-client" ]
        localhost: false
        ip_sans: false
        organization: "system:masters"
      front_proxy_client:
        server: false
        client: true
        domains: [ "front-proxy-client" ]
        localhost: false
        ip_sans: false
        organization: ""
      kubelet:
        server: false
        client: true
        domains: [ "system:nodes:{{ cert_hostname }}" ]
        localhost: false
        ip_sans: false
        organization: "system:nodes"
      controller_manager:
        server: false
        client: true
        domains: [ "system:kube-controller-manager" ]
        localhost: false
        ip_sans: false
        organization: ""
      scheduler:
        server: false
        client: true
        domains: [ "system:kube-scheduler" ]
        localhost: false
        ip_sans: false
        organization: ""
  block:
    - name: Check if role exists.
      community.hashi_vault.vault_read:
        path: "{{ engine_path }}/{{ certs_path[cert_type] }}/roles/{{ cert_hostname }}_{{ cert_type }}"
      register: role_ref
      changed_when: false
      failed_when: false
    - name: Create role if not exists.
      community.hashi_vault.vault_write:
        path: "{{ engine_path }}/{{ certs_path[cert_type] }}/roles/{{ cert_hostname }}_{{ cert_type }}"
        data:
          ttl: "{{ ttl }}"
          allow_localhost: "{{ certs[cert_type].localhost }}"
          allowed_domains: "{{ certs[cert_type].domains }}"
          allow_bare_domains: true
          allow_wildcard_certificates: false
          allow_ip_sans: "{{ certs[cert_type].ip_sans }}"
          server_flag: "{{ certs[cert_type].server }}"
          client_flag: "{{ certs[cert_type].client }}"
          key_bits: "{{ key_bits }}"
          key_usage:
            - "DigitalSignature"
            - "KeyEncipherment"
          organization: "{{ certs[cert_type].organization }}"
      when: role_ref is not defined
  loop: cert_types
  loop_control:
    loop_var: cert_type